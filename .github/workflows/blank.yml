# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with: 
          fetch-depth: 0 
          ref: branch
      
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Gets current date    
      - name: Get Current Date
        id: get-current-date
        # example output: 2020-01-31
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"      

      # Get previous tag
      - name: Get Previous Tag
        id: get-previous-tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found 

      # Retrieves all commits since latest tag to now
      - name: Get Commits Since Previous Tag
        id: get-commits-since-previous-tag
        run: |
          LAST_TAG=${{ steps.get-previous-tag.outputs.tag}}
          echo "::set-output commit-list=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"* %s")"

      # Creates PR's body with Header, Warning & the commit from previous step     
      - name: Create Pull Request Body Text
        id: create-pull-request-body-text
        run: |
          BODY_HEADER="## Release Notes"
          BODY_WARNING="⚠️ Do not Squash and Merge! ⚠️"
          COMMIT_LIST=${{ steps.get-commits-since-previous-tag.outputs.commit-list }}
          echo "::set-out pull-request-body="$BODY_HEADER\n$COMMIT_LIST\n$BODY_WARNING""  

      # Create PR with the data from previous 2 steps
      - name: Create Pull Request
        id: create-pull-request
        uses: peter-evans/create-pull-request@v3
        with:
          title: Release Candidate for ${{ steps.get-current-date.outputs.date }}
          body: ${{ steps.create-pull-request-body-text.outputs.pull-request-body }}
          branch: branch          